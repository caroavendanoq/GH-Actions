# Nombre representativo para el workflow
name: Hola Mundo

# Eventos. Cuándo se va a ejecutar. En este caso se ejecuta al hacer push al repo.
# Tipos de eventos: 
# 1. Ejecutar workflow al crear PR. on: [push, pull_request]
# a. Hacer push rama main, por ejemplo
on: 
  push:
    branches:
      - main
  
  pull_request:
    branches:
      - main

# Jobs. Permiten ejecutar todo lo que se necesite dentro de un servidor, actions provee varios servidores: ubuntu, windows y mac
# Para especificar SO usamos la directiva runs-on
# Steps. Unidad más pequeña que eprmite realizar diferentes acciones
# Acción. Hay varias directivas: run, que permite ejecutar comando
# Jobs se ejecutan independientes, pero de forma paralela, entonces van haber ocasiones en las que encesitamos que un job se 
# ejecute después de otro job. Para ahcerlo usamos la directiva needs
jobs:
  hola:
    runs-on: ubuntu-latest

    steps:
    - name: Hola Mundo
      run: echo "Hola Mundo"
    
    - name: touch file
      run: touch hola.txt
    
    - name: Set text
      run: echo "Hola Mundo" >> hola.txt
    
    - name: Read file 
      run: cat hola.txt


# Dentro de un workflow puedes tener múltiples jobs. Y cada uno se ejecuta en un servidor, entonces es necesario declarar runs-on en cada job
  other:
    runs-on: ubuntu-latest
    needs: [hola]
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.7

    - name: LS
      run: ls -al

    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.4
# Steps cuando trabajamos con actions, disponemos de la directiva with, permite pasar parametros para el action
      with:
        node-version: latest
    
    - name: node version
      run: node --version
  
# Actions. Bloque de código reutilizable que realiza una tarea específica en un step
# Agrupar steps dentro de un action y reutilizarlo en diferentes workflows
    - name: Install dependencies
      run: echo "npm install, but remember you can use the marketplace to do this"

# SERVICIOS
# Como mySQL, por ejemplo
# Actions provee forma de utilizar ese tipo de servicios usando contenedores 

# Dockerhub, imagen de mySQL
# Definir la directiva services
  say-hello: 
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: example
        ports:
          - 3306:3306
    
    steps:
      - name: Test
        run: ls

